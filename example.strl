%Written by Dion Balmforth and Logan McMaster


%Start State Change Module
module CruiseControl:

%Declare Input Variables
input On, Off, Resume, Set, QuickDecel, QuickAccel;
input Accel : float;
input Brake : float;
input Speed : float;

%Declare Output Variables
output CruiseSpeed, ThrottleCmd : float;
output CruiseState              : integer; %OFF ON STBY DISABLE

%Declare Signals
%signal OnSig, OffSig, DisableSig, StdbySig in

signal State: integer in
	[loop
		present State then
			emit CruiseState(?State);
		end present;
		
		pause;
	end loop]
	||
	run StateControl[signal On/OnSC, Off/OffSC, Resume/ResumeSC, Accel/AccelSC, Brake/BrakeSC, Speed/SpeedSC, State/CruiseStateSC]
	%||
	%run SpeedManagement
	%||
	%ThrottleControl

end signal
end module

%Create Module That Controls FSM
module StateControl:

constant SpeedMin = 30.f	: float;
constant SpeedMax = 150.f	: float;
constant PedalsMin = 3.f	: float;

input OnSC, OffSC, ResumeSC;
input AccelSC : float;
input BrakeSC : float;
input SpeedSC : float;

output CruiseStateSC		: integer;

var State := 0 : integer in
[loop
	emit CruiseStateSC(State);
	pause;
	trap SC in
		present OffSC then
			State := 0;
			exit SC;
		end present;

		%OFF LOGIC
		if State = 0 then
			present OnSC then
				State := 1;
				exit SC;
			end present;
		end if;

		%ON LOGIC
		if State = 1 then
			if ?AccelSC > PedalsMin or ?SpeedSC > SpeedMax or ?SpeedSC < SpeedMin then
				State := 3;
				exit SC;
			elsif ?BrakeSC > PedalsMin then
				State := 2;
				exit SC;
			end if;
		end if;

		%DISABLE LOGIC
		if State = 2 then 
			if ?BrakeSC > PedalsMin then
				exit SC;
			end if;

			present ResumeSC then 
				if ?AccelSC > PedalsMin or ?SpeedSC > SpeedMax or ?SpeedSC < SpeedMin then 
					State := 3;
					exit SC;
				elsif (?SpeedSC > SpeedMin and ?SpeedSC < SpeedMax) then
					State := 1;
					exit SC;
				end if;
			end present;
		end if;

		%STBY LOGIC
		if State = 3 then
			if ?AccelSC < PedalsMin and (SpeedMin < ?SpeedSC and ?SpeedSC < SpeedMax) then
				State := 1;
				exit SC;
			elsif ?BrakeSC > PedalsMin then
				State := 2;
				exit SC;
			end if;
		end if;

	end trap
end loop]
end var
end module
